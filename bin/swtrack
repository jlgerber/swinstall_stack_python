#!/usr/bin/env python

def add_src_to_syspath():
    """helper function to update syspath"""
    import sys
    from os.path import realpath as real
    from os.path import dirname as cdu
    api_dir = cdu(cdu(real(__file__)))
    sys.path.append(api_dir)

from datetime import datetime
add_src_to_syspath()

from swtrack.swinstall_stack.base import SchemaBase
from swtrack.swinstall_stack.schema2 import Schema2

import logging
#logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s')
#logging.getLogger().setLevel(logging.DEBUG)

LOG_LEVEL = logging.DEBUG
LOGFORMAT = "  %(log_color)s%(levelname)-8s%(reset)s | %(log_color)s%(message)s%(reset)s"
from colorlog import ColoredFormatter
logging.getLogger().setLevel(LOG_LEVEL)
formatter = ColoredFormatter(LOGFORMAT,log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
        })
stream = logging.StreamHandler()
stream.setLevel(LOG_LEVEL)
stream.setFormatter(formatter)
log = logging.getLogger()
log.setLevel(LOG_LEVEL)
log.addHandler(stream)


# Register schemas
#SchemaBase.register(Schema2)

def gen_random_hash():
    import random
    hash = random.getrandbits(128)
    return "%032x" % hash

usage = "usage: swtrack <install|rollback>"
def parse(action, schema="schema2"):
    schema2 = SchemaBase.parse('/Users/jonathangerber/src/python/swinstall_proposal/examples/{}/packages.xml'.format(schema))
    if action == "install":
        schema2.insert_element(gen_random_hash())
    elif action == "rollback":
        schema2.rollback_element()
    else:
        print usage


if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print usage
    else:
        parse(sys.argv[1])
