#!/usr/bin/env python
import os

def add_src_to_syspath():
    """helper function to update syspath"""
    import sys
    from os.path import realpath as real
    from os.path import dirname as cdu
    api_dir = cdu(cdu(real(__file__)))
    sys.path.append(api_dir)

from datetime import datetime
add_src_to_syspath()

from swinstall_stack.manager import SwinstallStackMgr
#from swinstall_stack.schemas.base.schema import SchemaCommon
from swinstall_stack.schemas import import_schemas
import_schemas()

import logging
#logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s')
#logging.getLogger().setLevel(logging.DEBUG)

LOG_LEVEL = logging.DEBUG
log = logging.getLogger()
log.setLevel(LOG_LEVEL)
#logging.getLogger().setLevel(LOG_LEVEL)
try:
    from colorlog import ColoredFormatter
    LOGFORMAT = "  %(log_color)s%(levelname)-8s%(reset)s | %(log_color)s%(message)s%(reset)s"
    formatter = ColoredFormatter(LOGFORMAT,log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
        })
    stream = logging.StreamHandler()
    stream.setLevel(LOG_LEVEL)
    stream.setFormatter(formatter)
    log.addHandler(stream)
except ImportError:
    logging.basicConfig(format='%(name)s - %(levelname)s - %(message)s')

def gen_random_hash():
    import random
    hash = random.getrandbits(128)
    return "%032x" % hash

usage = "usage: swtrack <install|rollback>"
def parse(action, schema="schema2"):
    mgr = SwinstallStackMgr()
    schema = mgr.parse(path_to_swinstalled_file(schema))
    if action == "install":
        if schema.schema_version == "1":
            schema.insert_element(datetime.now())
        elif schema.schema_version == "2":
            schema.insert_element(hash=gen_random_hash())
    elif action == "rollback":
        schema.rollback_element(datetime.now())
    else:
        print usage

def path_to_swinstalled_file(schema="schema2"):
    root = os.path.dirname(
        os.path.dirname(
            os.path.realpath(__file__)
        )
    )
    return os.path.join(root, "examples", schema, "packages.xml")

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print usage
    else:
        schema = sys.argv[2] if len(sys.argv) > 2 else "schema2"
        parse(sys.argv[1], schema)
